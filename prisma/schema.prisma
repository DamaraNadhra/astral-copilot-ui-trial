// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    searchHistory SearchHistory[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Grade {
  ALL
  KINDERGARTEN
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
  GRADE_9
  GRADE_10
  GRADE_11
  GRADE_12
}

model SearchHistory {
    id        String   @id @default(cuid())
    query     String
    grade     Grade
    response  DocumentToSearchHistory[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String
}

model Document {
    id        String   @id @default(cuid())
    filename  String
    snippet   String?  @default("")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    isValid   Boolean  @default(true)

    downloadKey String 
    searchHistory DocumentToSearchHistory[]

    @@unique([downloadKey, filename])
}

model DocumentToSearchHistory {
    id        String   @id @default(cuid())
    documentId String
    searchHistoryId String

    document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
    searchHistory SearchHistory @relation(fields: [searchHistoryId], references: [id], onDelete: Cascade)
    
    relevantPages  Int[]
    isParsed       Boolean @default(false)

    @@unique([documentId, searchHistoryId])

}